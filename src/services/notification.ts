import * as Notifications from "expo-notifications";
import * as Device from "expo-device";
import { Platform } from "react-native";

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

// Configurar permiss√µes de notifica√ß√£o
export const setupNotifications = async (): Promise<boolean> => {
  try {
    if (!Device.isDevice) {
      console.warn("Notifica√ß√µes s√≥ funcionam em dispositivos f√≠sicos");
      return false;
    }

    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== "granted") {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== "granted") {
      console.warn("Permiss√£o de notifica√ß√£o negada");
      return false;
    }

    // Configura√ß√£o para Android
    if (Platform.OS === "android") {
      await Notifications.setNotificationChannelAsync("setor-alerts", {
        name: "Alertas de Ocupa√ß√£o",
        importance: Notifications.AndroidImportance.HIGH,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: "#FF0000",
        sound: "default",
      });
    }

    return true;
  } catch (error) {
    console.error("Erro ao configurar notifica√ß√µes:", error);
    return false;
  }
};

// Notifica√ß√£o quando setor atinge >= 80% de ocupa√ß√£o
export const notifySetorHighOccupancy = async (
  setorNome: string,
  ocupacao: number
): Promise<void> => {
  try {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "‚ö†Ô∏è Ocupa√ß√£o Alta",
        body: `O setor ${setorNome} est√° com ${ocupacao}% de ocupa√ß√£o`,
        data: {
          setorNome,
          ocupacao,
          type: "setor_high_occupancy",
        },
        sound: "default",
      },
      trigger: null, // Notifica√ß√£o imediata
    });
    console.log(`‚úì Notifica√ß√£o enviada: Setor ${setorNome} - ${ocupacao}%`);
  } catch (error) {
    console.error("Erro ao enviar notifica√ß√£o de ocupa√ß√£o:", error);
  }
};

// Verificar se deve notificar (>= 80% de ocupa√ß√£o)
export const checkAndNotifyOccupancy = async (
  setorNome: string,
  vagasOcupadas: number,
  vagasTotais: number,
  notifiedSetores: Set<string>
): Promise<boolean> => {
  if (vagasTotais === 0) return false;

  const ocupacao = Math.round((vagasOcupadas / vagasTotais) * 100);
  const setorKey = `${setorNome}-${ocupacao}`;

  // Verifica se j√° foi notificado nesta sess√£o
  if (notifiedSetores.has(setorKey)) {
    return false;
  }

  // Notifica apenas se ocupa√ß√£o >= 80%
  if (ocupacao >= 80) {
    await notifySetorHighOccupancy(setorNome, ocupacao);
    return true;
  }

  return false;
};

// Notifica√ß√£o quando setor fica lotado (100%)
export const notifySetorFull = async (setorNome: string): Promise<void> => {
  try {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "üö® Setor Lotado",
        body: `O setor ${setorNome} atingiu 100% de ocupa√ß√£o`,
        data: {
          setorNome,
          type: "setor_full",
        },
        sound: "default",
      },
      trigger: null,
    });
    console.log(`‚úì Notifica√ß√£o de setor lotado: ${setorNome}`);
  } catch (error) {
    console.error("Erro ao enviar notifica√ß√£o de setor lotado:", error);
  }
};
